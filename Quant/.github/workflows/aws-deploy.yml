# ðŸš€ AWS CI/CD Pipeline
# GitHub Actions para deployment automÃ¡tico

name: Deploy to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: sistema-patrones

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Quant/requirements.txt
          pip install pytest black flake8
      
      - name: Code quality checks
        run: |
          black --check Quant/
          flake8 Quant/
      
      - name: Run tests
        run: |
          pytest Quant/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Deploy to ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Actualizar task definition
          sed -i "s|ACCOUNT.dkr.ecr.REGION.amazonaws.com/sistema-patrones:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" aws/ecs-task-definition.json
          
          # Registrar nueva task definition
          aws ecs register-task-definition \
            --cli-input-json file://aws/ecs-task-definition.json
          
          # Actualizar servicio
          aws ecs update-service \
            --cluster $PROJECT_NAME-cluster \
            --service $PROJECT_NAME-service \
            --task-definition $PROJECT_NAME-task
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster $PROJECT_NAME-cluster \
            --services $PROJECT_NAME-service
      
      - name: Deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment to AWS completed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
