{
  "functions": {
    "imbalance_data_structures.py::get_tick_imbalance_bars": {
      "name": "get_tick_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "num_prev_bars",
        "expected_imbalance_window",
        "exp_num_ticks_init",
        "exp_num_ticks_constraints",
        "batch_size",
        "verbose",
        "to_csv",
        "output_path"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_volume_imbalance_bars": {
      "name": "get_volume_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "num_prev_bars",
        "expected_imbalance_window",
        "exp_num_ticks_init",
        "exp_num_ticks_constraints",
        "batch_size",
        "verbose",
        "to_csv",
        "output_path"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_dollar_imbalance_bars": {
      "name": "get_dollar_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "num_prev_bars",
        "expected_imbalance_window",
        "exp_num_ticks_init",
        "exp_num_ticks_constraints",
        "batch_size",
        "verbose",
        "to_csv",
        "output_path"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_ema_tick_imbalance_bars": {
      "name": "get_ema_tick_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "alpha"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_ema_volume_imbalance_bars": {
      "name": "get_ema_volume_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "alpha"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_ema_dollar_imbalance_bars": {
      "name": "get_ema_dollar_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df",
        "alpha"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_const_tick_imbalance_bars": {
      "name": "get_const_tick_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_const_volume_imbalance_bars": {
      "name": "get_const_volume_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_const_dollar_imbalance_bars": {
      "name": "get_const_dollar_imbalance_bars",
      "file": "imbalance_data_structures.py",
      "args": [
        "file_path_or_df"
      ],
      "tests": [],
      "success": false,
      "error": null,
      "metrics": {},
      "graphs": []
    },
    "imbalance_data_structures.py::get_tick_rule_buy_volume": {
      "name": "get_tick_rule_buy_volume",
      "file": "imbalance_data_structures.py",
      "args": [
        "close",
        "volume"
      ],
      "tests": [
        {
          "dataset": "synthetic_tick_data_short",
          "success": true,
          "error": null,
          "execution_time": 0.0002124309539794922,
          "output_info": {
            "type": "Series",
            "size": 1000,
            "shape": [
              1000
            ],
            "has_nan": 