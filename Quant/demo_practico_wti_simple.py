"""
DEMO PR√ÅCTICO SIMPLIFICADO - Sistema de Machine Learning Financiero
==================================================================

Este script demuestra el uso pr√°ctico de los m√≥dulos optimizados:
- data_structures: Construcci√≥n de barras financieras avanzadas
- util: Utilidades para an√°lisis cuantitativo

Usando datos sint√©ticos de WTI Crude Oil para garantizar funcionamiento
"""

import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Agregar el path de los m√≥dulos de Machine Learning
sys.path.append('/workspaces/Sistema-de-datos/Quant/Machine Learning')
sys.path.append('/workspaces/Sistema-de-datos/Quant/Machine Learning/data_structures')
sys.path.append('/workspaces/Sistema-de-datos/Quant/Machine Learning/util')

print("üõ¢Ô∏è  DEMO PR√ÅCTICO - AN√ÅLISIS DE WTI CRUDE OIL")
print("=" * 60)

# 1. GENERAR DATOS SINT√âTICOS REALISTAS
print("\nüìä 1. GENERANDO DATOS SINT√âTICOS DE WTI...")

# Generar datos sint√©ticos que simulan WTI Crude Oil
np.random.seed(42)
n_points = 2000  # ~2 semanas de datos por minuto

# Crear timestamps
start_date = datetime.now() - timedelta(days=14)
timestamps = pd.date_range(start_date, periods=n_points, freq='1min')

# Simular precios de WTI (alrededor de $70-80)
base_price = 75.0
returns = np.random.normal(0, 0.001, n_points)  # 0.1% volatilidad por minuto
returns[0] = 0  # Primer retorno es 0

# Crear walk aleatorio con tendencia
prices = base_price * np.exp(np.cumsum(returns))

# Crear datos OHLCV sint√©ticos
data = []
for i in range(n_points):
    close = prices[i]
    volatility = abs(np.random.normal(0, 0.002))  # Volatilidad intrabar
    
    high = close * (1 + volatility)
    low = close * (1 - volatility)
    open_price = close + np.random.normal(0, 0.0005)  # Open cerca del close anterior
    volume = np.random.exponential(1000) + 500  # Volumen exponencial
    
    data.append({
        'timestamp': timestamps[i],
        'open': open_price,
        'high': high,
        'low': low,
        'close': close,
        'volume': volume
    })

df = pd.DataFrame(data)
df.set_index('timestamp', inplace=True)

print(f"‚úÖ Datos sint√©ticos generados: {len(df)} registros")
print(f"   Per√≠odo: {df.index[0]} a {df.index[-1]}")
print(f"   Rango de precios: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
print(f"   Volumen promedio: {df['volume'].mean():.0f}")

print(f"\nüìà Muestra de datos:")
print(df.head())

# 2. PROBAR M√ìDULOS DATA_STRUCTURES
print("\nüèóÔ∏è  2. PROBANDO M√ìDULOS DATA_STRUCTURES...")

try:
    from data_structures import (
        get_dollar_bars, get_volume_bars, get_tick_bars,
        get_time_bars, get_tick_imbalance_bars, get_volume_imbalance_bars
    )
    print("‚úÖ M√≥dulos data_structures importados correctamente")
except Exception as e:
    print(f"‚ùå Error importando data_structures: {e}")
    sys.exit(1)

# 2.1 TIME BARS (Barras de tiempo)
print("\nüïê 2.1 Construyendo TIME BARS (60 minutos)...")
try:
    time_bars = get_time_bars(df, freq='60T')
    print(f"‚úÖ Time bars creadas: {len(time_bars)} barras")
    print(f"   Primera barra: {time_bars.index[0]}")
    print(f"   √öltima barra: {time_bars.index[-1]}")
    print(time_bars.head(3))
except Exception as e:
    print(f"‚ùå Error en time bars: {e}")

# 2.2 VOLUME BARS (Barras de volumen)
print("\nüì¶ 2.2 Construyendo VOLUME BARS...")
try:
    volume_threshold = df['volume'].sum() / 15  # ~15 barras
    volume_bars = get_volume_bars(df['close'], df['volume'], volume_threshold)
    print(f"‚úÖ Volume bars creadas: {len(volume_bars)} barras")
    print(f"   Umbral de volumen: {volume_threshold:.0f}")
    print(volume_bars.head(3))
except Exception as e:
    print(f"‚ùå Error en volume bars: {e}")

# 2.3 DOLLAR BARS con AUTO-CALIBRACI√ìN
print("\nüí∞ 2.3 Construyendo DOLLAR BARS con auto-calibraci√≥n...")
try:
    dollar_bars = get_dollar_bars(
        df['close'], 
        df['volume'], 
        threshold=None,  # Auto-calibraci√≥n
        target_bars_per_day=20
    )
    print(f"‚úÖ Dollar bars creadas: {len(dollar_bars)} barras")
    print("   Auto-calibraci√≥n activada para 20 barras/d√≠a")
    print(dollar_bars.head(3))
except Exception as e:
    print(f"‚ùå Error en dollar bars: {e}")

# 2.4 TICK BARS
print("\nüìä 2.4 Construyendo TICK BARS...")
try:
    tick_threshold = len(df) // 20  # ~20 barras
    tick_bars = get_tick_bars(df['close'], threshold=tick_threshold)
    print(f"‚úÖ Tick bars creadas: {len(tick_bars)} barras")
    print(f"   Umbral de ticks: {tick_threshold}")
    print(tick_bars.head(3))
except Exception as e:
    print(f"‚ùå Error en tick bars: {e}")

# 2.5 IMBALANCE BARS
print("\n‚öñÔ∏è 2.5 Construyendo IMBALANCE BARS...")
try:
    # Volume Imbalance Bars
    vol_imb_bars = get_volume_imbalance_bars(
        df['close'], df['volume'], 
        expected_imbalance=0.1,  # 10% imbalance esperado
        num_prev_bars=50
    )
    print(f"‚úÖ Volume Imbalance bars: {len(vol_imb_bars)} barras")
    
    # Tick Imbalance Bars
    tick_imb_bars = get_tick_imbalance_bars(
        df['close'],
        expected_imbalance=0.1,
        num_prev_bars=50
    )
    print(f"‚úÖ Tick Imbalance bars: {len(tick_imb_bars)} barras")
    
except Exception as e:
    print(f"‚ùå Error en imbalance bars: {e}")

# 3. PROBAR M√ìDULOS UTIL
print("\nüõ†Ô∏è  3. PROBANDO M√ìDULOS UTIL...")

try:
    from util import (
        ewma, ewma_vectorized, ewma_alpha, get_ewma_info,
        get_daily_vol, get_garman_class_vol, get_yang_zhang_vol,
        get_bvc_buy_volume, get_tick_rule_buy_volume,
        get_classification_data, lin_parts,
        crop_data_frame_in_batches, winsorize_series
    )
    print("‚úÖ M√≥dulos util importados correctamente")
    print(f"   {get_ewma_info()}")
except Exception as e:
    print(f"‚ùå Error importando util: {e}")
    sys.exit(1)

# 3.1 AN√ÅLISIS DE VOLATILIDAD
print("\nüìà 3.1 AN√ÅLISIS DE VOLATILIDAD...")

try:
    # Volatilidad diaria simple
    daily_vol = get_daily_vol(df['close'], lookback=20)
    print(f"‚úÖ Volatilidad diaria calculada: {len(daily_vol)} valores")
    print(f"   Volatilidad actual: {daily_vol.iloc[-1]:.4f}")
    print(f"   Volatilidad promedio: {daily_vol.mean():.4f}")
    
    # Volatilidad Garman-Klass
    gk_vol = get_garman_class_vol(
        df['open'], df['high'], df['low'], df['close'], window=20
    )
    print(f"‚úÖ Volatilidad Garman-Klass: {gk_vol.iloc[-1]:.4f}")
    
    # Volatilidad Yang-Zhang
    yz_vol = get_yang_zhang_vol(
        df['open'], df['high'], df['low'], df['close'], window=20
    )
    print(f"‚úÖ Volatilidad Yang-Zhang: {yz_vol.iloc[-1]:.4f}")
    
except Exception as e:
    print(f"‚ùå Error en an√°lisis de volatilidad: {e}")

# 3.2 EWMA (EXPONENTIAL WEIGHTED MOVING AVERAGE)
print("\n‚ö° 3.2 AN√ÅLISIS EWMA...")

try:
    price_array = df['close'].values.astype(np.float64)
    
    # EWMA b√°sico
    ewma_basic = ewma(price_array, window=20)
    print(f"‚úÖ EWMA b√°sico calculado: √∫ltimo valor ${ewma_basic[-1]:.2f}")
    
    # EWMA vectorizado
    ewma_vec = ewma_vectorized(price_array, window=20)
    print(f"‚úÖ EWMA vectorizado: √∫ltimo valor ${ewma_vec[-1]:.2f}")
    
    # EWMA con alpha espec√≠fico
    ewma_alph = ewma_alpha(price_array, alpha=0.1)
    print(f"‚úÖ EWMA alpha=0.1: √∫ltimo valor ${ewma_alph[-1]:.2f}")
    
    # Comparaci√≥n
    print(f"   Diferencia EWMA basic vs vectorized: {abs(ewma_basic[-1] - ewma_vec[-1]):.6f}")
    
except Exception as e:
    print(f"‚ùå Error en EWMA: {e}")

# 3.3 CLASIFICACI√ìN DE VOLUMEN
print("\nüìä 3.3 CLASIFICACI√ìN DE VOLUMEN...")

try:
    # BVC (Bulk Volume Classification)
    bvc_volume = get_bvc_buy_volume(df['close'], df['volume'], window=20)
    buy_ratio = bvc_volume.sum() / df['volume'].sum()
    print(f"‚úÖ BVC calculado: {len(bvc_volume)} valores")
    print(f"   Ratio de compra BVC: {buy_ratio:.3f}")
    
    # Tick Rule
    tick_volume = get_tick_rule_buy_volume(df['close'], df['volume'])
    tick_buy_ratio = tick_volume.sum() / df['volume'].sum()
    print(f"‚úÖ Tick Rule calculado: ratio de compra {tick_buy_ratio:.3f}")
    
    print(f"   Diferencia entre m√©todos: {abs(buy_ratio - tick_buy_ratio):.3f}")
    
except Exception as e:
    print(f"‚ùå Error en clasificaci√≥n de volumen: {e}")

# 3.4 UTILIDADES MISCEL√ÅNEAS
print("\nüîß 3.4 UTILIDADES MISCEL√ÅNEAS...")

try:
    # Segmentaci√≥n de DataFrame
    chunks = crop_data_frame_in_batches(df.head(100), chunksize=25)
    print(f"‚úÖ DataFrame segmentado en {len(chunks)} chunks de ~25 filas")
    
    # Winsorizaci√≥n
    winsorized_prices = winsorize_series(df['close'], (0.05, 0.95))
    outliers_count = len(df['close']) - len(winsorized_prices[winsorized_prices == df['close']])
    print(f"‚úÖ Winsorizaci√≥n aplicada: {outliers_count} outliers suavizados")
    
    # Particiones lineales
    parts = lin_parts(len(df), 4)
    print(f"‚úÖ Particiones para multiproceso: {parts}")
    
    # Dataset sint√©tico
    X, y = get_classification_data(n_features=5, n_samples=100, random_state=42)
    print(f"‚úÖ Dataset sint√©tico generado: X{X.shape}, y{y.shape}")
    
except Exception as e:
    print(f"‚ùå Error en utilidades: {e}")

# 4. VISUALIZACIONES
print("\nüìä 4. GENERANDO VISUALIZACIONES...")

try:
    plt.style.use('default')
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üõ¢Ô∏è Demo Pr√°ctico - ML Financiero con WTI Crude Oil', fontsize=16)
    
    # 4.1 Precios y EWMA
    ax1 = axes[0, 0]
    ax1.plot(df.index, df['close'], 'b-', alpha=0.7, label='Precio Close', linewidth=1)
    
    if 'ewma_basic' in locals():
        ewma_series = pd.Series(ewma_basic, index=df.index)
        ax1.plot(ewma_series.index, ewma_series.values, 'r-', linewidth=2, label='EWMA(20)')
    
    ax1.set_title('Precios y EWMA')
    ax1.set_ylabel('Precio ($)')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # 4.2 Volatilidad
    ax2 = axes[0, 1]
    if 'daily_vol' in locals():
        ax2.plot(daily_vol.index, daily_vol.values, 'g-', linewidth=2, label='Vol. Diaria')
        if 'gk_vol' in locals():
            ax2.plot(gk_vol.index, gk_vol.values, 'orange', linewidth=2, label='Vol. G-K')
    ax2.set_title('Estimadores de Volatilidad')
    ax2.set_ylabel('Volatilidad')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    
    # 4.3 Comparaci√≥n de Barras
    ax3 = axes[1, 0]
    bar_types = []
    bar_counts = []
    
    if 'time_bars' in locals():
        bar_types.append('Time')
        bar_counts.append(len(time_bars))
    if 'volume_bars' in locals():
        bar_types.append('Volume')
        bar_counts.append(len(volume_bars))
    if 'dollar_bars' in locals():
        bar_types.append('Dollar')
        bar_counts.append(len(dollar_bars))
    if 'tick_bars' in locals():
        bar_types.append('Tick')
        bar_counts.append(len(tick_bars))
    
    if bar_types:
        colors = ['blue', 'green', 'red', 'orange'][:len(bar_types)]
        ax3.bar(bar_types, bar_counts, color=colors)
        ax3.set_title('Tipos de Barras Generadas')
        ax3.set_ylabel('N√∫mero de Barras')
    
    # 4.4 Distribuci√≥n de Volumen
    ax4 = axes[1, 1]
    ax4.hist(df['volume'].values, bins=30, alpha=0.7, color='purple', edgecolor='black')
    ax4.axvline(df['volume'].mean(), color='red', linestyle='--', linewidth=2, 
                label=f'Media: {df["volume"].mean():.0f}')
    ax4.set_title('Distribuci√≥n de Volumen')
    ax4.set_xlabel('Volumen')
    ax4.set_ylabel('Frecuencia')
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Guardar gr√°fico
    plot_path = '/workspaces/Sistema-de-datos/Quant/demo_wti_results.png'
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    print(f"‚úÖ Gr√°ficos guardados en: {plot_path}")
    
    # Mostrar en consola que se gener√≥
    print("‚úÖ Visualizaciones generadas correctamente")
    
except Exception as e:
    print(f"‚ùå Error en visualizaciones: {e}")

# 5. RESUMEN FINAL
print("\n" + "="*60)
print("üìã RESUMEN DEL DEMO PR√ÅCTICO")
print("="*60)

print(f"\nüìä DATOS PROCESADOS:")
print(f"   ‚Ä¢ Dataset: WTI Crude Oil (sint√©tico)")
print(f"   ‚Ä¢ Registros analizados: {len(df)}")
print(f"   ‚Ä¢ Per√≠odo: {df.index[0].strftime('%Y-%m-%d %H:%M')} a {df.index[-1].strftime('%Y-%m-%d %H:%M')}")
print(f"   ‚Ä¢ Rango de precios: ${df['close'].min():.2f} - ${df['close'].max():.2f}")

print(f"\nüèóÔ∏è  M√ìDULOS DATA_STRUCTURES PROBADOS:")
structures_tested = []
if 'time_bars' in locals():
    structures_tested.append(f"‚úÖ Time Bars ({len(time_bars)} barras)")
if 'volume_bars' in locals():
    structures_tested.append(f"‚úÖ Volume Bars ({len(volume_bars)} barras)")
if 'dollar_bars' in locals():
    structures_tested.append(f"‚úÖ Dollar Bars ({len(dollar_bars)} barras - auto-calibradas)")
if 'tick_bars' in locals():
    structures_tested.append(f"‚úÖ Tick Bars ({len(tick_bars)} barras)")
if 'vol_imb_bars' in locals():
    structures_tested.append(f"‚úÖ Volume Imbalance Bars ({len(vol_imb_bars)} barras)")

for struct in structures_tested:
    print(f"   {struct}")

print(f"\nüõ†Ô∏è  M√ìDULOS UTIL PROBADOS:")
util_tested = []
if 'daily_vol' in locals():
    util_tested.append(f"‚úÖ Volatilidad Diaria ({daily_vol.iloc[-1]:.4f})")
if 'gk_vol' in locals():
    util_tested.append(f"‚úÖ Volatilidad Garman-Klass ({gk_vol.iloc[-1]:.4f})")
if 'ewma_basic' in locals():
    util_tested.append(f"‚úÖ EWMA Optimizado (${ewma_basic[-1]:.2f})")
if 'bvc_volume' in locals():
    util_tested.append(f"‚úÖ Clasificaci√≥n de Volumen (ratio: {buy_ratio:.3f})")

for util in util_tested:
    print(f"   {util}")

print(f"\n‚ö° PERFORMANCE:")
print(f"   ‚úÖ {get_ewma_info()}")
print(f"   ‚úÖ Auto-calibraci√≥n de dollar bars funcionando")
print(f"   ‚úÖ Todas las funciones ejecutadas exitosamente")

print(f"\nüéâ DEMO COMPLETADO EXITOSAMENTE!")
print(f"   Los m√≥dulos data_structures y util est√°n funcionando")
print(f"   perfectamente con datos financieros realistas.")
print(f"   Gr√°ficos guardados en: demo_wti_results.png")
print("="*60)
